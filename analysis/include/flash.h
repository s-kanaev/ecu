#pragma once

#include "types.h"

////////////// FLASH MAP
byte FLASH[0x10000] = {
  /* knock_sensor_balance_control_gain_ratio_table configuration words (bytes), lengts = 0x40 bytes  */
  [0x24EF] = 0x3F,
  [0x24F0] = {0x3F, 0x3F, 0x3F, 0x39, 0x34, 0x31, 0x2F, 0x2D, 0x2A, 0x28, 0x27, 0x25, 0x24, 0x23, 0x22, 0x21},
  [0x2500] = {0x20, 0x1F, 0x1E, 0x1D, 0x1D, 0x1D, 0x1C, 0x1C, 0x1B, 0x1B, 0x1A, 0x19, 0x19, 0x18, 0x18, 0x18},
  [0x2510] = {0x17, 0x16, 0x16, 0x16, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x13, 0x13},
  [0x2520] = {0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11},

  [0x8057] = 0x64,  // minimum A/D Converted Coolant Temperature
  [0x8058] = 0xF0,  // maximum A/D Converted Coolant Temperature
  [0x805D] = 0x00,  // somehow used in processing of A/D Converted Coolant Temperature, compared to RAM[0xF6BF] ?
  [0x805E] = 0x64,  // minimum A/D Converted Intake Air Temperature
  [0x805F] = 0xF0,  // maximum A/D Converted Intake Air Temperature

  [0x8060] = 0x05,  // ???, somehow used for intake air temperature
  [0x8061] = 0x50,  // fallback adjusted intake air temperature
  [0x8062] = 0x3C,  // minimum adjusted value of ignition switch voltage
  [0x8063] = 0xA0,  // maximum adjusted value of ignition switch voltage
  [0x8067] = 0x00,  // minimum ADC value of CO potentiometer
  [0x8068] = 0x64,  // maximum ADC value of CO potentiometer
  [0x8069] = 0x00,  // fallback data for XRAM[0xFF74], Adjusted CO Potentiometer
  [0x806A] = 0x00,  // fallback data for XRAM[0xFF75]
  [0x807C] = 0x24,  // ???, copied to XRAM[0xF6B6] and XRAM[0xF6B8]
  [0x808C] = 0x80,  // ???, copied to RAM[0x67]
  [0x8093] = 0x00,  // fallback data for XRAM[0xF770]
  [0x8096] = 0x1F,  // Threshold voltage for ignition switch to set RAM[0x28], bit 4
  [0x809A] = 0x42,  // Threshold value for RAM[0x49]
  [0x809B] = 0x1E,  // Threshold value for XRAM[0xF679]

  // Table for Coolant Temperature
  // Temp, decimal, C: -54   -54   -54   -54   -54   -54   -54   -54   -23     8    39    71   102   133   164   164   164
  // Global formula: Real temperature = -60 (decimal) + Table value
  // ADC voltage:        0  .311  .622  .934  1.245 1.556 1.867 2.179 2.49  2.801 3.112 3.424 3.735 4.046 4.357 4.669 4.99
  // ADC Voltage = 10mV * Temperature (Kelvin)
  //                    0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f     10
  [0x831F..0x832F] = {0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x25, 0x44, 0x63, 0x83, 0xA2, 0xC1, 0xE0, 0xE0, 0xE0},
  // Table #2 for Coolant Temperature - usage unknown
  [0x8330..0x8340] = {0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x25, 0x44, 0x63, 0x83, 0xA2, 0xC1, 0xE0, 0xE0, 0xE0},
  // Table for Intake Air Temperature
  [0x8341..0x8351] = {0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x25, 0x44, 0x63, 0x83, 0xA2, 0xC1, 0xE0, 0xE0, 0xE0},

  [0x873F] = 0x3F,  // kitting bits: 0011 1111
                    // bit 0 - is there constant power for ECU;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x00, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 1 - is there EGO (exhaust gas oxygen) sensor;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x01, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 2 - is there knock sensor;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x03, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 3 - is there air temperature sensor;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x07, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 4 - is there camshaft position sensor;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x0F, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 5 - camshaft position sensor cross-section is aligned with TDC;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x1F, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 6 - is there speed sensor;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0xBF, 0 => FLASH[0xFFFF] = 0xFF
                    // bit 7 - is there CO potentiometer;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0x7F, 0 => FLASH[0xFFFF] = 0xFF
  [0x8740] = 0xC0,  // kitting bits: 1100 0000
                    // bit 0 - is there ABS;
                    //         default = 0; 1 => FLASH[0xFFFE] = 0xFE, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 1 - is there EGR valve position sensor;
                    //         default = 0; 1 => FLASH[0xFFFE] = 0xFD, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 2 - is there adsorber valve position;
                    //         default = 0; 1 => FLASH[0xFFFE] = 0xFB, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 3 - is there power steering pressure sensor;
                    //         default = 0; 1 => FLASH[0xFFFE] = 0xF7, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 4 - is there additional oxygen sensor (at absorber?);
                    //         default = 0; 1 => FLASH[0xFFFE] = 0xEF, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 5 - does MAF have burnout function;
                    //         default = 0; 1 = FLASH[0xFFFE] = 0xDF, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 6 - is there throttle position sensor;
                    //         default = 1; 0 => FLASH[0xFFFE] = 0x3F, FLASH[0xFFFF] = 0x00,
                    //                      1 => FLASH[0xFFFE] = 0xFF, FLASH[0xFFFF] = 0xFF
                    // bit 7 - is there coolant temperature sensor;
                    //         default = 1; 0 => FLASH[0xFFFE] = 0x7F, FLASH[0xFFFF] = 0x00,
                    //                      1 => FLASH[0xFFFE] = 0xFF, FLASH[0xFFFF] = 0xFF
  [0x8741] = 0x23,  // kitting bits: 0010 0011
                    // bit 0 - is there IROM;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x00, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 1 - should DAC be corrected from IROM;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x01, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 2 - is there immobilizer;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0xFB, 0 => FLASH[0xFFFF] = 0xFF
                    // bit 3 - should RCO be corrected from IROM;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0xF7, 0 => FLASH[0xFFFF] = 0xFF
                    // bit 4 - should fuel be blocked;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0xEF, 0 => FLASH[0xFFFF] = 0xFF
                    // bit 5 - should fuel intake be asynchronous on second launch attempt;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x1F, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 6 - should throttle position sensor adaptation be done;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0xBF, 0 => FLASH[0xFFFF] = 0xFF
                    // bit 7 - should idle speed be adapted;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0x7F, 0 => FLASH[0xFFFF] = 0xFF
  [0x8742] = 0xC0,  // kitting bits: 1100 0000
                    // bit 0 - should bypass valve be adapted at idle;
                    //         default = 0; 1 => FLASH[0xFFFE] = 0xFE, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 1 - is EGO with heating control;
                    //         default = 0; 1 => FLASH[0xFFFE] = 0xFD, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 2 - reserved?
                    // bit 3 - reserved?
                    // bit 4 - reserved?
                    // bit 5 - reserved?
                    // bit 6 - are there injectors;
                    //         default = 1; 0 => FLASH[0xFFFE] = 0x3F, FLASH[0xFFFF] = 0x00,
                    //                      1 => FLASH[0xFFFE] = 0xFF, FLASH[0xFFFF] = 0xFF
                    // bit 7 - are there ignition coils;
                    //         default = 1; 0 => FLASH[0xFFFE] = 0x7F, FLASH[0xFFFF] = 0x00,
                    //                      1 => FLASH[0xFFFE] = 0xFF, FLASH[0xFFFF] = 0xFF

  [0x8743] = 0x13,  // kitting bits: 0001 0011
                    // bit 0 - is there check-engine lamp;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x00, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 1 - is there fuel pump;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x01, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 2 - is there start injector;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0xFB, 0 => FLASH[0xFFFF] = 0xFF
                    // bit 3 - is there EGR valve;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0xF7, 0 => FLASH[0xFFFF] = 0xFF
                    // bit 4 - is there adsorber;
                    //         default = 1; 0 => FLASH[0xFFFF] = 0x0F, 1 => FLASH[0xFFFF] = 0xFF
                    // bit 5 - is there tachometer;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0xDF, 0 => FLASH[0xFFFF] = 0xFF
                    // bit 6 - is there fuel meter display;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0xBF, 0 => FLASH[0xFFFF] = 0xFF
                    // bit 7 - is there AirConditioner;
                    //         default = 0; 1 => FLASH[0xFFFF] = 0x7F, 0 => FLASH[0xFFFF] = 0xFF

  [0x8744] = 0x05,  // kitting bits: 0000 0101
                    // bit 0 - is there fan;
                    //         default = 1; 0 => FLASH[0xFFFE] = 0x00, FLASH[0xFFFF] = 0x00,
                    //                      1 => FLASH[0xFFFE] = 0xFF, FLASH[0xFFFF] = 0xFF
                    // bit 1 - reserved?
                    // bit 2 - is there bypass valve;
                    //         default = 1; 0 => FLASH[0xFFFE] = 0x03, FLASH[0xFFFF] = 0x00,
                    //                      1 => FLASH[0xFFFE] = 0xFF, FLASH[0xFFFF] = 0xFF
                    // bit 3 - is there idle economizer valve (carb);
                    //         default = 0; 1 => FLASH[0xFFFE] = 0xF7, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 4 - is there secondary air compressor;
                    //         default = 0; 1 => FLASH[0xFFFE] = 0xEF, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 5 - is intake controlled;
                    //         default = 0; 1 => FLASH[0xFFFE] = 0xDF, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 6 - is there VVT;
                    //         default = 0; 1 => FLASH[0xFFFE] = 0xBF, 0 => FLASH[0xFFFE] = 0xFF
                    // bit 7 - reserved?

  [0x8753] = 0x1B,  // ???, copied to RAM[0x59]
  [0x8755] = 0x5A,  // ???, copied to RAM[0x57] and RAM[0x58]

  [0x8761] = 0x00,  // ???

  [0x8788] = 0x55,  // some limit for adjusted coolant temperature
  [0x8789] = 0x08,  // value of XRAM[0xF7A4]
  [0x878A] = 0x01,  // value of XRAM[0xF7A4]

  /* knock sensor knock filter frequency configuration word */
  [0x87A7] = 0x2C,

  /* offset for knock sensor balance control gain ratio table @ 0x24EF */
  [0x87A9] = 0x30,
  
  [0x87B7] = 0x69,  // some adjusted coolant temperature limit for filling in XRAM[0xF8CD]..XRAM[0xF8CD+0x7F] (0x80 bytes)
  
  [0x8A4B] = 0x28,  // Fallback table value of coolant temperature
  
  /* ?????????????????????? */
  //                  0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f     10
  [0x8AFB..0x8C0A] = 0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBD,
  //                  11    12    13    14    15    16    17    18    19    1a    1b    1c    1d    1e    1f    20    21
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBD,
  //                  22    23    24    25    26    27    28    29    2a    2b    2c    2d    2e    2f    30    31    32
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBD,
  //                  33    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     43
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9D, 0xBB,
  //                  44    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     54
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,
  //                  55    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     65
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,
  //                  66    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     76
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,
  //                  77    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     87
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,
  //                  88    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     98
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,
  //                  99    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     a9
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,
  //                  aa    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     ba
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,
  //                  bb    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     cb
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,
  //                  cc    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     dc
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,
  //                  dd    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     ed
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,
  //                  ee    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     fe
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,
  //                  ff    .     .     .     .     .     .     .     .     .     .     .     .     .     .     .     10f
                     0x05, 0x17, 0x26, 0x31, 0x3B, 0x43, 0x4A, 0x4F, 0x54, 0x5B, 0x64, 0x69, 0x72, 0x7B, 0x8A, 0x9C, 0xBB,

  /* EGO sensor calibration */
  [0x991C..0x99AB] = { 0x59, 0x59, 0x5A, 0x5A, 0x5B, 0x5C, 0x5E, 0x5F,
                       0x60, 0x60, 0x5F, 0x5E, 0x5E, 0x5F, 0x60, 0x61,
                       0x5B, 0x5B, 0x5B, 0x5B, 0x5C, 0x5D, 0x5D, 0x5E,
                       0x5F, 0x5E, 0x5F, 0x5F, 0x5F, 0x60, 0x61, 0x62,
                       0x5C, 0x5C, 0x5C, 0x5C, 0x5D, 0x5E, 0x61, 0x61,
                       0x60, 0x60, 0x61, 0x60, 0x60, 0x61, 0x62, 0x63,
                       0x65, 0x64, 0x63, 0x63, 0x65, 0x66, 0x66, 0x66,
                       0x66, 0x64, 0x65, 0x64, 0x65, 0x66, 0x67, 0x68,
                       0x6B, 0x6B, 0x6B, 0x6A, 0x69, 0x69, 0x68, 0x67,
                       0x68, 0x67, 0x69, 0x69, 0x69, 0x68, 0x68, 0x69,
                       0x70, 0x6E, 0x6C, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B,
                       0x69, 0x6A, 0x6A, 0x6B, 0x6A, 0x69, 0x69, 0x69,
                       0x73, 0x72, 0x71, 0x6F, 0x6D, 0x6C, 0x6B, 0x6B,
                       0x6B, 0x6B, 0x6C, 0x6B, 0x6A, 0x6A, 0x6A, 0x69,
                       0x78, 0x76, 0x74, 0x70, 0x6E, 0x6D, 0x6C, 0x6C,
                       0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6B, 0x6A,
                       0x77, 0x77, 0x77, 0x75, 0x73, 0x6F, 0x6E, 0x6E,
                       0x6C, 0x6C, 0x6D, 0x6C, 0x6C, 0x6C, 0x6C, 0x6B,
                       0x77, 0x76, 0x75, 0x74, 0x72, 0x70, 0x6F, 0x6E,
                       0x6D, 0x6D, 0x6D, 0x6D, 0x6D, 0x6C, 0x6C, 0x6B,
                       0x7A, 0x79, 0x77, 0x76, 0x74, 0x72, 0x71, 0x6F,
                       0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6E, 0x6D,
                       0x7C, 0x7B, 0x7A, 0x78, 0x76, 0x74, 0x73, 0x72,
                       0x71, 0x70, 0x6F, 0x6F, 0x6F, 0x6E, 0x6F, 0x6E,
                       0x79, 0x78, 0x77, 0x76, 0x75, 0x73, 0x72, 0x70,
                       0x70, 0x70, 0x6F, 0x70, 0x6F, 0x6E, 0x71, 0x70,
                       0x7B, 0x7A, 0x77, 0x74, 0x74, 0x74, 0x75, 0x72,
                       0x71, 0x73, 0x70, 0x71, 0x6F, 0x71, 0x73, 0x72,
                       0x7C, 0x7B, 0x78, 0x76, 0x77, 0x75, 0x75, 0x71,
                       0x71, 0x73, 0x71, 0x73, 0x74, 0x76, 0x73, 0x72,
                       0x7A, 0x79, 0x78, 0x77, 0x78, 0x75, 0x75, 0x72,
                       0x71, 0x72, 0x72, 0x74, 0x74, 0x74, 0x73, 0x72 },

  [0x9A1C..9B1B] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,2,4,4,3,4,4,3,2,2,0,0,0,
                     0,0,0,2,4,5,5,6,6,6,5,4,2,0,0,0,
                     0,0,0,2,3,4,5,6,7,7,6,4,2,0,0,0,
                     0,0,0,2,2,3,4,5,5,5,5,4,2,0,0,0,
                     0,0,0,1,1,2,2,2,3,3,4,3,1,0,0,0,
                     0,0,0,1,1,2,2,1,2,2,3,1,1,0,0,0,
                     0,0,0,1,0,1,1,0,1,1,1,0,1,0,0,0,
                     0,0,0,0,1,2,0,0,0,0,1,0,1,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },

  // ????????????????
  [0xA2FD..0xA31D] = 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB,
                     0xFB, 0xFB, 0xF9, 0xF7, 0xF5, 0xF0, 0xE6, 0xD7,
                     0xC8, 0xB9, 0xAD, 0xA6, 0xA0, 0x9D, 0x9A, 0x9A,
                     0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A, 0x9A,
                     0x9A,

  // ????????????????
  [0xABF1..0xACE8] = 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02,
                     0x02, 0x02, 0x02, 0x03, 0x04, 0x05, 0x05, 0x06,
                     0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
                     0x0F, 0x10, 0x12, 0x15, 0x18, 0x1B, 0x1E, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x02,
                     0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
                     0x0B, 0x0C, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11,
                     0x12, 0x14, 0x17, 0x1B, 0x1E, 0x22, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x02, 0x03, 0x04, 0x05, 0x06,
                     0x07, 0x09, 0x0B, 0x0C, 0x0E, 0x0F, 0x10, 0x11,
                     0x12, 0x13, 0x14, 0x14, 0x14, 0x14, 0x15, 0x16,
                     0x17, 0x18, 0x1A, 0x1F, 0x26, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                     0x0B, 0x0E, 0x11, 0x14, 0x17, 0x1B, 0x1F, 0x22,
                     0x24, 0x25, 0x26, 0x26, 0x26, 0x26, 0x25, 0x24,
                     0x23, 0x23, 0x23, 0x23, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02,
                     0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                     0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x11, 0x13,
                     0x15, 0x17, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x03,
                     0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
                     0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x11, 0x13, 0x15,
                     0x17, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x03, 0x03,
                     0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,
                     0x0C, 0x0D, 0x0E, 0x0F, 0x11, 0x13, 0x15, 0x17,
                     0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                     0x01, 0x01, 0x01, 0x01, 0x02, 0x03, 0x03, 0x04,
                     0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C,
                     0x0D, 0x0E, 0x0F, 0x11, 0x13, 0x15, 0x17, 0x19,

  /* some table for knock sensor or when coolant temperature above limit in FLASH[0x87B7] */
  [0xADF1..0xADE0] = {9, 9, 9, 9, 9, 9, 9, 8, 6, 3, 0, 0, 0, 0, 0, 0},

  /* knock sensor integration time constant configuration word */
  [0xAE01] = 0x00,

  [0xFFFE] = 0xFF,
  [0xFFFF] = 0xFF
};


